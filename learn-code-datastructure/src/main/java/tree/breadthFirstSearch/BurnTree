/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    int res=0;
    public int solve(TreeNode root, int B) {
       traverse(root,B);
       return res;
    }
    public int traverse(TreeNode root,int B){
         if(root==null){
            return 0;
        }

        if(root.val==B){
                return 1;
        }
        int l=traverse(root.left,B);
        if(l>=1){
            res=Math.max(res,l+maxDepth(root.right));
            return l+1;
        }
        int r=traverse(root.right,B);
        if(r>=1){
            res=Math.max(res,r+maxDepth(root.left));
            return r+1;
        }
        return 0;

    }
    public int maxDepth(TreeNode root){
        if(root==null){
            return 0;
        }
        return 1+Math.max(maxDepth(root.left),maxDepth(root.right));
    }
}
=============================================================
=============================================================

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
import java.util.*;

class Dis{
    int dis;
    Dis(int dis)
    {
        this.dis = dis;
    }
}
public class Solution {
    static int result = -1;
    public static int burnTree(TreeNode A,int B,Dis dis)
    {
        if(A == null)
        return 0;
        if(B == A.val)
        {
            dis.dis = 0;
            return 1;
        }
        Dis ldis = new Dis(-1),rdis = new Dis(-1);
        int lh = burnTree(A.left,B,ldis);
        int rh = burnTree(A.right,B,rdis);
        if(ldis.dis != -1){
            dis.dis = ldis.dis +1;
            result = (result > dis.dis + rh)? result : dis.dis+rh;
        }
        else if(rdis.dis != -1){
            dis.dis = rdis.dis +1;
            result = (result > dis.dis + lh)? result : dis.dis+lh;
        }
        return (lh>rh)?lh+1:rh+1;
    }


    public int solve(TreeNode A, int B) {
     result = 0;
     burnTree(A,B,new Dis(-1));
     return result;

    }
}